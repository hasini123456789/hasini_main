import pandas as pd

classname_file = "class-descriptions-boxable.csv"
annotations_file = "oidv6-train-annotations-bbox.csv"
filtered_classes_file = "filtered_class_names.txt"
images_per_class = 1

# Load filtered class names (actual classes with images)
with open(filtered_classes_file, "r") as f:
    filtered_class_names = [line.strip() for line in f.readlines()]
filtered_class_set = set(filtered_class_names)

# Load class descriptions and keep only label-to-name mappings we care about
classes_df = pd.read_csv(classname_file, header=None, names=['LabelName', 'ClassName'])
filtered_classes_df = classes_df[classes_df["ClassName"].isin(filtered_class_set)]
labelname_to_classname = dict(zip(filtered_classes_df["LabelName"], filtered_classes_df["ClassName"]))
valid_labelnames = set(filtered_classes_df["LabelName"])

# Load annotations, filter only relevant labels
annots_df = pd.read_csv(annotations_file, usecols=["ImageID", "LabelName"])
annots_df = annots_df[annots_df["LabelName"].isin(valid_labelnames)]

# Select up to `images_per_class` per class
image_ids = (
    annots_df
    .groupby("LabelName")["ImageID"]
    .apply(lambda x: x.head(images_per_class))
    .reset_index(drop=True)
    .drop_duplicates()
)

# Load used IDs (if file exists)
try:
    with open("used_ids.txt", "r") as file:
        used_ids = set(file.read().splitlines())
except FileNotFoundError:
    used_ids = set()

# Write new image IDs to file and track which were added
new_used_ids = []
with open("image_ids.txt", "w") as f:
    for image_id in image_ids:
        if image_id not in used_ids:
            f.write(f"train/{image_id}\n")
            new_used_ids.append(image_id)

# Update used_ids.txt
with open("used_ids.txt", "a") as file:
    for used_id in new_used_ids:
        file.write(used_id + "\n")
